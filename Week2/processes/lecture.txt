in this section we're going to talk about processes in linux. Processes are just running programs.
When the operating system starts up there is a process called init that brings up all the other processes on the system and lets you do work.
Subsequently started processes get a new process id that uniquely identifies them. We've already seen that the the python program we ran got a process id.

check out

pidof init

this is a very interesting and controversial process in linux, especially now. We're going to study the init process in great detail later, but I'll give you some foreshadowing - there is a culture war going on right now as we speak about this first process started by the operating system. Some people say its too complicated, some people say it's too crude, some people say the NSA is spying on us via this init process - we'll talk about that later. In any event, its pid is 1, and all the processes started after it have a higher pid.

You can see a list of all your running processes with the very helpful 'top' command. There is another similar program called htop. Check it out.
exit top/htop by typing 'q'. I n the top menu you can see the pid, the user who started the process, the memory and cpu usage of the process, the name of the command that started it, how long the process has been running and more. You already know how to get the pidof a running program by typing pidof program name. Start multiple python programs and then type pidof python, and you'll see a bunch of them. 


python program.py &
python program.py &
python program.py &
pidof python
100 200 300

Then it's up to you as a programmer to determine which one it is you're after! For example, if you want to write to the standardin of a particular program, youll need to know the pid of that particular program. Thats up to you as a skilled linux programmer to know how to get the pid of interest, and we're going to look at more tools to help you do that!

A job is a process started by a shell that doesn't detach. That is, it's there held onto by the shell. If you start a program in the shell, it's held onto by the shell. Do you know the computer science word for a detached process? Ten points for gryffindor if you know how to pronounce it right! This is just vocabulary you need to know - its a daemon process. The `jobs` command lists non-daemon processes! For example, type "jobs" - youll see the three python programs you just started. If you close your shell now, and then click the ssh button again, then type jobs again, youll see they aren't there anymore. Those processes / jobs were tied to your bash shell and when you closed it they all died.

Now here's a superuseful command. If you are running a numerical simulation, for example, and want to compute the value of pi, for example, you say

nohup python program &

Now type 'jobs' and you'll see its not there. There is more to be said about this, and if you come to office hours I can show you. The job is detached from you and stays running even when you leave the shell.

You can send commands to a running process to stop and start it if you want. You can switch the running programs from running in the foreground to running in the background.


